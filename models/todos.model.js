let toDos = [
	{
		id: '1',
		name: 'Study JavaScript',
		color: 'Green'
	},
	{
		id: '2',
		name: 'Go to the gym',
		color: 'Blue'
	},
	{
		id: '3',
		name: 'Pick up groceries',
		color: 'Chartreuse'
	}
];

// 7. In your model, print the todo object to the console when it is provided by user input (PUT, POST, PATCH). Hard code a small array of three items in your model to simulate a database. Return this array for the "get all todos" logic and search it to return a single item for "get one todo by ID". Return a 404 if the requested ID does not exist.

// 9. When creating or updating a todo item, return the final document with an appropriate status code to the user (including the autogenerated ID and the hexColor property) and add it to the list of todo's assigned to your model instance.


export default class ToDosModel {
	static getToDos = () => {
		console.log('\t\t Model : getToDos')
		console.log(toDos); // TODO: pretty this up
		return toDos;
	};

	static createToDo = (newToDo) => {
		console.log('\t\t Model : createToDo')
		toDos.push(newToDo); 
		console.log(newToDo); //TODO pretty this up
		return newToDo; 
	};

	static getToDo = (id) => {
		console.log('\t\t Model : getToDo');


		const todo = toDos.find((item) => {
			return item.id === id;
		});

		console.log(todo);

		return todo;
	};

	static replaceToDo = (id, toDo) => {
		console.log('\t\t Model : replaceToDo');

		const toDoIndex = toDos.findIndex((item) => (item.id === id)); 

		if (toDoIndex > -1 ){  
			toDos.splice(toDoIndex, 1, toDo);
			return toDo;
		}
		
		console.log(toDo);

		return false; // check that everything works here...was returning toDo before and things were fine
	};

	static updateToDo = (id, toDo) => {
		const toDoIndex = toDos.findIndex((item) => (item.id === id));

		if (toDoIndex > -1 ){  
			Object.keys(toDo).forEach((key) => {
				if (key === 'id') {
					return;
				}
				toDos[toDoIndex][key] = toDo[key];
			});

			return toDos[toDoIndex];

		}
		
		console.log(toDo);

		return false;
	};

	static deleteToDo = (id) => {
		console.log('\t\t Model : deleteToDo');

		const countBeforeDelete = toDos.length;

		toDos = toDos.filter((item) => (item.id !== id));

		if (countBeforeDelete === toDos.length) {
			return false;
		}

		return true;
	};
}


